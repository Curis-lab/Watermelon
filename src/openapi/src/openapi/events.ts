/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * EventGo API
 * API documentation for EventGo application
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  Event
} from './index.schemas';

import getAllEventsMutator from '../../fetcher';
import getEventByIdMutator from '../../fetcher';





/**
 * @summary Get all events
 */
export const getAllEvents = (
    
 signal?: AbortSignal
) => {
      
      
      return getAllEventsMutator<Event[]>(
      {url: `/events`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllEventsQueryKey = () => {
    return [`/events`] as const;
    }

    
export const getGetAllEventsQueryOptions = <TData = Awaited<ReturnType<typeof getAllEvents>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllEvents>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllEventsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllEvents>>> = ({ signal }) => getAllEvents(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllEvents>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllEvents>>>
export type GetAllEventsQueryError = unknown


export function useGetAllEvents<TData = Awaited<ReturnType<typeof getAllEvents>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllEvents>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllEvents>>,
          TError,
          Awaited<ReturnType<typeof getAllEvents>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllEvents<TData = Awaited<ReturnType<typeof getAllEvents>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllEvents>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllEvents>>,
          TError,
          Awaited<ReturnType<typeof getAllEvents>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllEvents<TData = Awaited<ReturnType<typeof getAllEvents>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllEvents>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all events
 */

export function useGetAllEvents<TData = Awaited<ReturnType<typeof getAllEvents>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllEvents>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllEventsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get event by ID
 */
export const getEventById = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return getEventByIdMutator<Event>(
      {url: `/events/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetEventByIdQueryKey = (id: string,) => {
    return [`/events/${id}`] as const;
    }

    
export const getGetEventByIdQueryOptions = <TData = Awaited<ReturnType<typeof getEventById>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEventByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventById>>> = ({ signal }) => getEventById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEventById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEventByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEventById>>>
export type GetEventByIdQueryError = unknown


export function useGetEventById<TData = Awaited<ReturnType<typeof getEventById>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventById>>,
          TError,
          Awaited<ReturnType<typeof getEventById>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEventById<TData = Awaited<ReturnType<typeof getEventById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventById>>,
          TError,
          Awaited<ReturnType<typeof getEventById>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEventById<TData = Awaited<ReturnType<typeof getEventById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get event by ID
 */

export function useGetEventById<TData = Awaited<ReturnType<typeof getEventById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetEventByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





export const getGetAllEventsResponseMock = (): Event[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), location: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})))

export const getGetEventByIdResponseMock = (overrideResponse: Partial< Event > = {}): Event => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), location: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})


export const getGetAllEventsMockHandler = (overrideResponse?: Event[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Event[]> | Event[])) => {
  return http.get('*/events', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAllEventsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetEventByIdMockHandler = (overrideResponse?: Event | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Event> | Event)) => {
  return http.get('*/events/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetEventByIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getEventsMock = () => [
  getGetAllEventsMockHandler(),
  getGetEventByIdMockHandler()
]
