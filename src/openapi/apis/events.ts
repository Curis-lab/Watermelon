/**
 * Generated by Orval
 * Do not edit manually
 * See `gen:api` script in the package.json
 */
import useSwr from 'swr';
import type {
  Key,
  SWRConfiguration
} from 'swr';

import type {
  Event
} from '../models';

import useGetAllEventsMutator from '../fetcher';
import useGetEventByIdMutator from '../fetcher';



  
  
  
/**
 * @summary Get all events
 */
export const getAllEvents = (
    
 ) => {
    return useGetAllEventsMutator<Event[]>(
    {url: `/events`, method: 'GET'
    },
    );
  }



export const getGetAllEventsKey = () => [`/events`] as const;

export type GetAllEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllEvents>>>
export type GetAllEventsQueryError = unknown

/**
 * @summary Get all events
 */
export const useGetAllEvents = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAllEvents>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAllEventsKey() : null);
  const swrFn = () => getAllEvents()

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Get event by ID
 */
export const getEventById = (
    id: string,
 ) => {
    return useGetEventByIdMutator<Event>(
    {url: `/events/${id}`, method: 'GET'
    },
    );
  }



export const getGetEventByIdKey = (id: string,) => [`/events/${id}`] as const;

export type GetEventByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEventById>>>
export type GetEventByIdQueryError = unknown

/**
 * @summary Get event by ID
 */
export const useGetEventById = <TError = unknown>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getEventById>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetEventByIdKey(id) : null);
  const swrFn = () => getEventById(id)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
